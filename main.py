import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import random

load_dotenv()

TOKEN = os.getenv("TOKEN")

if TOKEN is None:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env –∏ –µ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ")


greetings = [
    "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! üçø –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –∫–∏–Ω–æ—à–∫—É?",
    "–û, –∫–∏–Ω–æ—à–Ω—ã–π –≥–æ—Å—Ç—å! –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∏—â–µ–º: –¥—Ä–∞–º—ã, –∫–æ–º–µ–¥–∏–∏ –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—É—à–µ–≤–Ω–æ–µ?",
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PopcornPal üçø ‚Äî —Ç–≤–æ–π —É—é—Ç–Ω—ã–π –∫–∏–Ω–æ–≥–∏–¥ —Å —é–º–æ—Ä–æ–º!"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(greetings))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    if "–≥—Ä—É—Å—Ç–Ω–æ" in text or "–ø–ª–∞—á—É" in text:
        await update.message.reply_text("–û–±–Ω–∏–º–∞—é ü§ó –°–æ–≤–µ—Ç—É—é '–í–∏–Ω–æ–≤–∞—Ç—ã –∑–≤—ë–∑–¥—ã' üåü")
    elif "–≤–µ—Å–µ–ª–æ" in text or "—É–ª—ã–±–∫–∞" in text:
        await update.message.reply_text("–¢—ã –∫–∞–∫ —Å–æ–ª–Ω—ã—à–∫–æ —Å–µ–≥–æ–¥–Ω—è! ‚òÄÔ∏è –ü–æ–ø—Ä–æ–±—É–π '–ú—ã ‚Äì –ú–∏–ª–ª–µ—Ä—ã' ÔøΩÔøΩ")
    elif "–ª—é–±–æ–≤—å" in text or "—Ä–æ–º–∞–Ω—Ç–∏–∫–∞" in text:
        await update.message.reply_text("–û, –ª—é–±–æ–≤—å –≤–∏—Ç–∞–µ—Ç –≤ –≤–æ–∑–¥—É—Ö–µ! üíï –ì–ª—è–Ω—å '–î–æ –≤—Å—Ç—Ä–µ—á–∏ —Å —Ç–æ–±–æ–π' –∏–ª–∏ '–õ–∞-–õ–∞ –õ–µ–Ω–¥'")
    else:
        await update.message.reply_text("–°–∫–∞–∂–∏, –∫–∞–∫–æ–µ —É —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–ª–∏ –∂–∞–Ω—Ä? –Ø –ø–æ–¥—Å–∫–∞–∂—É üé¨")

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

print("PopcornPal –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()


